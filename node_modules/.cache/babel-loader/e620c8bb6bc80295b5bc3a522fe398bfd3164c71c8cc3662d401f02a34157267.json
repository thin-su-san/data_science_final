{"ast":null,"code":"const weights = {\n  \"A\": 10000,\n  \"B\": 1000,\n  \"C\": 100,\n  \"D\": 10,\n  \"+\": 1,\n  \"-\": -1\n};\nconst gradingSort = (rowA, rowB) => {\n  const a = rowA.HappinessGrade.split('').map(char => weights[char]).reduce((a, b) => a + b);\n  const b = rowB.HappinessGrade.split('').map(char => weights[char]).reduce((a, b) => a + b);\n  console.log('a');\n  console.log(a);\n  console.log('b');\n  console.log(b);\n  if (a > b) {\n    return 1;\n  }\n  if (b > a) {\n    return -1;\n  }\n  return 0;\n};\nexport const COLUMNS = [\n// {\n//     Header: 'Cluster',\n//     accessor: 'cluster'\n// }, \n{\n  name: 'University',\n  selector: row => row.name,\n  sortable: true\n}, {\n  name: 'GPA',\n  selector: row => row.GPA,\n  sortable: true\n}, {\n  name: 'Happiness Grade',\n  selector: row => row.HappinessGrade,\n  sortable: true,\n  sortFunction: gradingSort\n}, {\n  name: 'Happiness Rank',\n  selector: row => row.HappinessRank,\n  sortable: true\n}];","map":{"version":3,"names":["weights","gradingSort","rowA","rowB","a","HappinessGrade","split","map","char","reduce","b","console","log","COLUMNS","name","selector","row","sortable","GPA","sortFunction","HappinessRank"],"sources":["/Users/thinsusan/Desktop/data_science_final/src/components/columns.js"],"sourcesContent":["const weights = {\n    \"A\": 10000,\n\t\t\"B\": 1000,\n\t\t\"C\": 100,\n\t\t\"D\": 10,\n\t\t\"+\": 1,\n\t\t\"-\": -1\n  }\n\n  const gradingSort = (rowA, rowB) => {\n    const a = rowA.HappinessGrade.split('').map(char => weights[char]).reduce((a,b) => a+b)\n    const b = rowB.HappinessGrade.split('').map(char => weights[char]).reduce((a,b) => a+b)\n\n    console.log('a')\n    console.log(a);\n    console.log('b')\n    console.log(b);\n\n    if (a > b) {\n        return 1;\n    }\n\n    if (b > a) {\n        return -1;\n    }\n\n    return 0;\n  };\n\nexport const COLUMNS = [\n    // {\n    //     Header: 'Cluster',\n    //     accessor: 'cluster'\n    // }, \n    {\n        name: 'University',\n        selector: row => row.name,\n        sortable: true\n    },\n    {\n        name: 'GPA',\n        selector: row => row.GPA,\n        sortable: true\n    },\n    {\n        name: 'Happiness Grade',\n        selector: row => row.HappinessGrade,\n        sortable: true,\n        sortFunction: gradingSort\n    },\n    {\n        name: 'Happiness Rank',\n        selector: row => row.HappinessRank,\n        sortable: true\n    }\n];"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACZ,GAAG,EAAE,KAAK;EACZ,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,GAAG;EACR,GAAG,EAAE,EAAE;EACP,GAAG,EAAE,CAAC;EACN,GAAG,EAAE,CAAC;AACN,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMC,CAAC,GAAGF,IAAI,CAACG,cAAc,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAACL,CAAC,EAACM,CAAC,KAAKN,CAAC,GAACM,CAAC,CAAC;EACvF,MAAMA,CAAC,GAAGP,IAAI,CAACE,cAAc,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAACL,CAAC,EAACM,CAAC,KAAKN,CAAC,GAACM,CAAC,CAAC;EAEvFC,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChBD,OAAO,CAACC,GAAG,CAACR,CAAC,CAAC;EACdO,OAAO,CAACC,GAAG,CAAC,GAAG,CAAC;EAChBD,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;EAEd,IAAIN,CAAC,GAAGM,CAAC,EAAE;IACP,OAAO,CAAC;EACZ;EAEA,IAAIA,CAAC,GAAGN,CAAC,EAAE;IACP,OAAO,CAAC,CAAC;EACb;EAEA,OAAO,CAAC;AACV,CAAC;AAEH,OAAO,MAAMS,OAAO,GAAG;AACnB;AACA;AACA;AACA;AACA;EACIC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACF,IAAI;EACzBG,QAAQ,EAAE;AACd,CAAC,EACD;EACIH,IAAI,EAAE,KAAK;EACXC,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACE,GAAG;EACxBD,QAAQ,EAAE;AACd,CAAC,EACD;EACIH,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACX,cAAc;EACnCY,QAAQ,EAAE,IAAI;EACdE,YAAY,EAAElB;AAClB,CAAC,EACD;EACIa,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAEC,GAAG,IAAIA,GAAG,CAACI,aAAa;EAClCH,QAAQ,EAAE;AACd,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}